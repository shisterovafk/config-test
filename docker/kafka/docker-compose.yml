
#version: '3' # устарело Compose не выбирает version точную схему для проверки файла Compose, а отдает предпочтение самой последней схеме при ее реализации.

# Секция volumes на корневом уровне: Здесь объявляются все внешние тома, которые могут быть использованы одним или несколькими сервисами.
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  certs:
    driver: local
  esdata:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata:
    driver: local
  filebeatdata:
    driver: local
  logstashdata:
    driver: local

#настройки сетевых параметров, которые позволяют контейнерам взаимодействовать друг с другом. Каждый контейнер в docker-compose обычно подключается к виртуальной сети Docker,
# и эта сеть позволяет контейнерам коммуницировать без необходимости явного указания их IP-адресов.
networks:
  default:
    name: elastic
    external: false

services:

#по умолчанию запускает в Running in KRaft mode..., 3.5.0 zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/var/lib/zookeeper/data"
      - "zookeeper_data:/var/lib/zookeeper/log"
      - "zookeeper_data:/etc/zookeeper/secrets"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181

  kafka-1:
    image: confluentinc/cp-kafka
    ports:
      - "${ADV_KAFKA_CLIENT_PORT}:9092"
      - "${ADV_KAFKA_AGENT_PORT}:9093"
      - "${ADV_KAFKA_BROKER_1_PORT}:9094"
    volumes:
      - "kafka_data:/var/lib/kafka/data"
      - "kafka_data:/etc/kafka/secrets"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=CLIENT://:9092, AGENT://:9093, BROKER://:9094
      - KAFKA_ADVERTISED_LISTENERS=CLIENT://${ADV_KAFKA_CLIENT_ADDR}:${ADV_KAFKA_CLIENT_PORT}, AGENT://${ADV_KAFKA_AGENT_ADDR}:${ADV_KAFKA_AGENT_PORT}, BROKER://${ADV_KAFKA_BROKER_1_ADDR}:${ADV_KAFKA_BROKER_1_PORT}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT, AGENT:PLAINTEXT, BROKER:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=BROKER
    depends_on:
      - zookeeper

#Включение безопасности. Этот контейнер настройки запустится первым, дождется, пока контейнер ES01 выйдет в сеть, а затем использует наши переменные среды для настройки паролей, которые мы хотим в нашем кластере.
#Мы также сохраняем все сертификаты в томе «certs», чтобы все другие контейнеры могли иметь к ним доступ.
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  #кластер Elasticsearch из одного узла
  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      #будем использовать сертификат CA и сертификаты узлов, которые были сгенерированы setup
      - certs:/usr/share/elasticsearch/config/certs
      #храним данные Elasticsearch в томе за пределами контейнера для надежности
      - esdata:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120